<?php

require_once 'includes/status_messages.php';
require_once 'app/lib/system.php';
require_once 'includes/config.php';
require_once 'includes/functions.php';

/**
 * Manage Dynamic DNS client configuration
 */
function DisplayDDClientConfig()
{

    $status = new StatusMessages();
    $system = new \RaspAP\System\Sysinfo;

    if (!RASPI_MONITOR_ENABLED) {
        if (isset($_POST['SaveDDClientSettings'])) {
            saveDDClientConfig($status);
        } elseif (isset($_POST['StartDDClient'])) {
            $status->addMessage('Attempting to start Dynamic DNS Client', 'info');
            exec('sudo /bin/systemctl start ddclient.service', $return);
            foreach ($return as $line) {
                $status->addMessage($line, 'info');
            }
        } elseif (isset($_POST['StopDDClient'])) {
            $status->addMessage('Attempting to stop Dynamic DNS Client', 'info');
            exec('sudo /bin/systemctl stop ddclient.service', $return);
            foreach ($return as $line) {
                $status->addMessage($line, 'info');
            }
        }
    }
    // get stored provider info
    if (file_exists(RASPI_CONFIG.'/ddclient.ini')) {
        $arrIni = parse_ini_file(RASPI_CONFIG.'/ddclient.ini');
        $provider = ($arrIni) ? $arrIni['Provider'] : null;
    } else {
        $provider = null;
    }

    // system calls
    exec("ip -o link show | awk -F': ' '{print $2}'", $interfaces);
    sort($interfaces);
    exec('sudo cat '. RASPI_DDCLIENT_CONFIG, $ddclientconfig);

    $arrConfig = [];
    foreach ($ddclientconfig as $line) {
        if (strlen($line) === 0) {
            continue;
        }
        if ($line[0] != "#") {
            $arrLine = explode("=", $line);
            $arrConfig[$arrLine[0]]=$arrLine[1];
        }
    };
    $ddclientstatus = $system->ddclientStatus();
    $serviceStatus = $ddclientstatus[0] == 0 ? "down" : "up";
    $iface = array_key_exists('interface', $arrConfig) ? $arrConfig['interface'] : null;
    $protocol = array_key_exists('protocol', $arrConfig) ? $arrConfig['protocol'] : null;
    $use = array_key_exists('use', $arrConfig) ? $arrConfig['use'] : null;
    $ssl = array_key_exists('ssl', $arrConfig) ? $arrConfig['ssl'] : null;

    echo renderTemplate(
        "ddclient", compact(
            "status",
            "serviceStatus",
            "ddclientstatus",
            "interfaces",
            "arrConfig",
            "iface",
            "provider",
            "protocol",
            "use",
            "ssl"
        )
    );
}

/**
 *  Saves a ddclient configuration
 *
 * @param obj status
 */
function saveDDClientConfig($status)
{
    $return = 1;
    $errors = validateDDClientInput();

    if (empty($errors)) {
        $return = updateDDClientConfig($status);
    } else {
        foreach ($errors as $error) {
            $status->addMessage($error, 'danger');
        }
    }
    if ($return == 1) {
        $status->addMessage('ddclient configuration failed to be updated.', 'danger');
        return false;
    }
    if ($return == 0) {
        $status->addMessage('Restart the ddclient service for your changes to take effect.', 'success');
    } else {
        $status->addMessage('ddclient configuration failed to be updated.', 'danger');
        return false;
    }
    // persist selected provider
    $ini = [];
    $ini['Provider'] = $_POST['ddclient-provider'];
    $result = write_php_ini($ini, RASPI_CONFIG.'/ddclient.ini');

    return true;
}

/**
 * Validates ddclient user input from the $_POST object
 *
 * @return array $errors
 */
function validateDDClientInput()
{
    $errors = [];
    if (!filter_var($_POST['ddclient-ip'], FILTER_VALIDATE_IP) && !empty($_POST['ddclient-ip'])) {
        $errors[] = _('Invalid interface name.');
    }
    if (!filter_var($_POST['ddclient-server'], FILTER_VALIDATE_DOMAIN, FILTER_FLAG_HOSTNAME) && !empty($_POST['ddclient-server'])) {
        $errors[] = _('Invalid server domain.');
    }
    if ($_POST['ddclient-method'] =='cmd' && empty($_POST['ddclient-cmd'])) {
        $errors[] = _('External command not specified.');
    }
    if ($_POST['ddclient-method'] =='fw' && empty($_POST['ddclient-fw'])) {
        $errors[] = _('Firewall status page not specified.');
    }
    if (empty($_POST['ddclient-domain'])) {
        $errors[] = _('Domain not specified.');
    }
    return $errors;
}

/**
 * Updates a ddclient configuration
 *
 * @param object $status
 * @return boolean $result
 */
function updateDDClientConfig($status)
{
    $config = [ '# Configuration file for ddclient generated by RaspAP' ];
    $config[] = '#';
    $config[] = '# '. RASPI_DDCLIENT_CONFIG;
    if (!empty($_POST['ddclient-daemon'])) {
        $config[] = 'daemon=' .$_POST['ddclient-daemon'];
    } else {
        $config[] = 'daemon=' . getDefaultNetOpts('ddclient','daemon-delay');
    }
    if (!empty($_POST['ddclient-usessl'])) {
        if ($_POST['ddclient-usessl'] == 1) {
            $config[] = 'ssl=yes';
        } else {
            $config[] = 'nossl';
        }
    }
    $config[] = '';
    if (isset($_POST['ddclient-method'])) {
        $key = 'ddclient-'.$_POST['ddclient-method'];
        $config[] = 'use=' .$_POST['ddclient-method'];
        $config[] = $_POST['ddclient-method'] .'='. $_POST[$key];
    }
    if (isset($_POST['ddclient-protocol'])) {
        $config[] = 'protocol=' .$_POST['ddclient-protocol'];
    }
    if (isset($_POST['ddclient-server'])) {
        $config[] = 'server=' .$_POST['ddclient-server'];
    }
    if (isset($_POST['ddclient-username'])) {
        $config[] = 'login=' .$_POST['ddclient-username'];
    }
    if (isset($_POST['ddclient-password'])) {
        $config[] = 'password=' .$_POST['ddclient-password'];
    }
    if (isset($_POST['ddclient-domain'])) {
        $config[] = $_POST['ddclient-domain'];
    }
    $config = join(PHP_EOL, $config);
    $config .= PHP_EOL;

    file_put_contents("/tmp/ddclientddata", $config);
    system('sudo cp /tmp/ddclientddata '.RASPI_DDCLIENT_CONFIG, $return);
    
    if ($return == 0) {
        $status->addMessage('ddclient configuration updated successfully', 'success');
    } else {
        $status->addMessage('Unable to save ddclient settings', 'danger');
        return false;
    }
    return $return;
}

